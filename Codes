## Temporal Alignment for top10 variables

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
from sklearn.metrics import mean_squared_error

# === Step 1: Load Aligned CSV and Control CSV ===
aligned_df = pd.read_csv("C:/Users/newfaculty/Desktop/LongitudinalDataAnalysis/TestVsReference/test_aligned_to_control.csv")
control_df = pd.read_csv("C:/Users/newfaculty/Desktop/LongitudinalDataAnalysis/TestVsReference/Micro_10737_TestStable.csv")

# Convert time
control_df['time'] = control_df['time'].apply(lambda x: int(str(x).replace('t', '')) if isinstance(x, str) else int(x))
aligned_df['time'] = aligned_df['time'].astype(int)

# Align time and columns
control_df = control_df[control_df['time'].isin(aligned_df['time'])]
control_df = control_df[aligned_df.columns]  # Ensure same column order

# === Step 2: Calculate difference score for each taxon ===
taxa_cols = control_df.columns[1:]  # Skip 'time'

scores = {}
for taxon in taxa_cols:
    control_vals = control_df[taxon].values
    aligned_vals = aligned_df[taxon].values
    # Option 1: RMSE
    rmse = np.sqrt(mean_squared_error(control_vals, aligned_vals))
    # Option 2: AUC difference (optional)
    # auc_diff = np.abs(np.trapz(control_vals) - np.trapz(aligned_vals))
    scores[taxon] = rmse

# === Step 3: Rank taxa by RMSE (most disturbed = highest RMSE) ===
ranked = sorted(scores.items(), key=lambda x: x[1], reverse=True)
top_taxa = [r[0] for r in ranked[:10]]  # Top 10 disturbed
print("üîç Top 10 Disturbed Taxa (by RMSE):")
for t, s in ranked[:10]:
    print(f"{t}: RMSE = {s:.4f}")

# === Step 4: Plot top N disturbed taxa ===
# === Step 4: Plot top N disturbed taxa (with custom colors) ===
output_dir = "C:/Users/newfaculty/Desktop/LongitudinalDataAnalysis/TestVsReference/Disturbed_Taxa_Plots"
os.makedirs(output_dir, exist_ok=True)

for taxon in top_taxa:
    plt.figure(figsize=(6, 4))
    plt.plot(control_df['time'], control_df[taxon], label='Control', color='C0', marker='o')
    plt.plot(aligned_df['time'], aligned_df[taxon], label='Aligned Test', color='C3', linestyle='--', marker='x')
    plt.title(f"Disturbed Taxon: {taxon}")
    plt.xlabel("Time")
    plt.ylabel("Abundance")
    plt.legend()
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f"{taxon.replace('/', '_')}_disturbed.png"), dpi=300)
    plt.close()


print(f"\nüìÅ Plots saved to: {output_dir}")


### Temporal Alignment for all variables
